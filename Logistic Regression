import math
from copy import deepcopy
import numpy as np
import matplotlib.pyplot as plt

xfile = open("ex2data1.txt",'r')

X = []
x = []
y = []
for row in xfile:
    X.append(float(row[:row.find(',')]))
    x.append(float(row[row.find(',') + 1:row.rfind(',')]))
    y.append((row[row.rfind(',')+1:-1]))

negX = []
negx = []
posX = []
posx = []
for i in range(len(X)):
    if y[i] == '0':
        negX.append(X[i])
        negx.append(x[i])
    else:
        posX.append(X[i])
        posx.append(x[i])


plt.plot(negX,negx,'yo')
plt.plot(posX,posx,'k+')
#plt.show()

Xmatrix = np.ones([len(X),2])
Xmatrix[:,0] = X
Xmatrix[:,1] = x
X = Xmatrix

ymatrix = np.ones([len(y),1])
ymatrix[:,0] = y
y = ymatrix


theta = np.zeros([1,3])
iters = 1500
alpha = 0.1


def sigmoid(z):
    return 1 / ( 1 + (math.e ** (-z)))


def computeCost(X,y,theta):
    sum = 0
    for i in range(len(X)):
        sum += (-y[i,0]) * math.log(sigmoid(theta[:,0] + theta[:,1] * X[i,0] + theta[:,2] * X[i,1])) - (1-y[i,0]) * math.log(1 - (sigmoid(theta[:,0] + theta[:,1] * X[i,0] + theta[:,2] * X[i,1])))
    return sum / len(X)

#print(computeCost(X,y,theta))


def gradientDescent(X,y,theta,iters,alpha):
    cost = computeCost(X,y,theta)
    thetheta = deepcopy(theta)
    for k in range(iters):
        newtheta = deepcopy(theta)
        d1 = np.sum((sigmoid(theta[:,0] + theta[:,1] * X[:,0] + theta[:,2] * X[:,1]) - y[:,0])*1)/len(X)
        newtheta[:,0] = theta[:,0] - alpha * d1
        d2 = np.sum((sigmoid(theta[:,0] + theta[:,1] * X[:,0] + theta[:,2] * X[:,1]) - y[:,0])*X[:,0])/len(X)
        newtheta[:,1] = theta[:, 1] - alpha * d2
        d3 = np.sum((sigmoid(theta[:,0] + theta[:,1] * X[:,0] + theta[:,2] * X[:,1]) - y[:,0])*X[:,1])/len(X)
        newtheta[:,2] = theta[:, 2] - alpha * d3
        print(newtheta)
        newcost = computeCost(X, y, newtheta)
        if newcost < cost:
            cost = newcost
            thetheta = deepcopy(newtheta)
        theta = deepcopy(newtheta)
    return thetheta, cost

g ,cost = (gradientDescent(X,y,theta,iters,alpha))

plt.plot(X,(g[:,0]+g[:,1]*X[:,0]+g[:,2]*X[:,1]), color='blue', linewidth=1)
plt.show()








