import numpy as np
import matplotlib.pyplot as plt

X=[]
y=[]
mfile = open('ex1data1.txt','r')
for row in mfile:
    X.append(float(row[:row.find(',')]))
    y.append(float(row[row.find(',')+1:-1]))

plt.plot(X,y,'rx')
plt.axis([4,24,(-5),25])
plt.xlabel('Population of City in 10,000s')
plt.ylabel('Profit in $10,000s')
#plt.show()

xmatrix = np.ones([len(X),2])
xmatrix[:,1] = X
X = xmatrix

ymatrix = np.ones([len(y),1])
ymatrix[:,0] = y
y = ymatrix

theta = np.zeros([1,2])
alpha=0.01
iters = 1500


def computeCost(X,y,theta):
    sum=0
    for i in range(len(X)):
        sum += ((theta[:,0]+theta[:,1]*X[i,1]) - y[i,0])**2
    return sum / (2 * len(X))



def gradientDescent(X,y,theta,alpha,iters):
    cost = computeCost(X, y, theta)
    theta=theta
    thetheta = theta
    for j in range(iters):
        newtheta = theta - ((alpha * np.sum(((theta[:, 0] + theta[:, 1] * X[:, 1]) - y[:, 0]) * X[:,0])) / len(X))
        newtheta[:,1] = theta[:,1] - ((alpha * np.sum(((theta[:, 0] + theta[:, 1] * X[:, 1]) - y[:, 0]) * X[:,1])) / len(X))
        newcost = computeCost(X,y,newtheta)
        if newcost<cost:
            cost = newcost
            thetheta = newtheta
        theta = newtheta
    return thetheta,cost


g,c=gradientDescent(X,y,theta,alpha,iters)
print(g,c)

plt.plot(X,(g[:,0]+g[:,1]*X), color='blue', linewidth=1)
plt.show()
